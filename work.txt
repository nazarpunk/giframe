  {GeosetAnimationChunk};
  {LightChunk};
  {HelperChunk};
  {AttachmentChunk};
  {ParticleEmitterChunk};
  {ParticleEmitter2Chunk};
  {RibbonEmitterChunk};
  {EventObjectChunk};
  {CameraChunk};
  {CollisionShapeChunk};

//+-----------------------------------------------------------------------------
//| Animated geoset alpha
//+-----------------------------------------------------------------------------
struct GeosetAlpha
{
  DWORD 'KGAO';

  DWORD NrOfTracks;
  DWORD InterpolationType;             //0 - None
                                       //1 - Linear
                                       //2 - Hermite
                                       //3 - Bezier
  DWORD GlobalSequenceId;

  struct ScalingTrack[NrOfTracks]
  {
    DWORD Time;
    FLOAT Alpha;

    if(InterpolationType > 1)
    {
      FLOAT InTan;
      FLOAT OutTan;
    }
  };
};


//+-----------------------------------------------------------------------------
//| Animated geoset color
//+-----------------------------------------------------------------------------
struct GeosetColor
{
  DWORD 'KGAC';

  DWORD NrOfTracks;
  DWORD InterpolationType;             //0 - None
                                       //1 - Linear
                                       //2 - Hermite
                                       //3 - Bezier
  DWORD GlobalSequenceId;

  struct ScalingTrack[NrOfTracks]
  {
    DWORD Time;
    FLOAT3 Color;

    if(InterpolationType > 1)
    {
      FLOAT3 InTan;
      FLOAT3 OutTan;
    }
  };
};

//+-----------------------------------------------------------------------------
//| Animated camera position translation
//+-----------------------------------------------------------------------------
struct CameraPositionTranslation
{
  DWORD 'KCTR';

  DWORD NrOfTracks;
  DWORD InterpolationType;             //0 - None
                                       //1 - Linear
                                       //2 - Hermite
                                       //3 - Bezier
  DWORD GlobalSequenceId;

  struct TranslationTrack[NrOfTracks]
  {
    DWORD Time;
    FLOAT3 Translation;

    if(InterpolationType > 1)
    {
      FLOAT3 InTan;
      FLOAT3 OutTan;
    }
  };
};


//+-----------------------------------------------------------------------------
//| Animated camera target translation
//+-----------------------------------------------------------------------------
struct CameraTargetTranslation
{
  DWORD 'KTTR';

  DWORD NrOfTracks;
  DWORD InterpolationType;             //0 - None
                                       //1 - Linear
                                       //2 - Hermite
                                       //3 - Bezier
  DWORD GlobalSequenceId;

  struct TranslationTrack[NrOfTracks]
  {
    DWORD Time;
    FLOAT3 Translation;

    if(InterpolationType > 1)
    {
      FLOAT3 InTan;
      FLOAT3 OutTan;
    }
  };
};


//+-----------------------------------------------------------------------------
//| Animated camera rotation
//+-----------------------------------------------------------------------------
struct CameraRotation
{
  DWORD 'KCRL';

  DWORD NrOfTracks;
  DWORD InterpolationType;             //0 - None
                                       //1 - Linear
                                       //2 - Hermite
                                       //3 - Bezier
  DWORD GlobalSequenceId;

  struct TranslationTrack[NrOfTracks]
  {
    DWORD Time;
    FLOAT Rotation;

    if(InterpolationType > 1)
    {
      FLOAT InTan;
      FLOAT OutTan;
    }
  };
};

//+-----------------------------------------------------------------------------
//| Animated attachment visibility
//+-----------------------------------------------------------------------------
struct AttachmentVisibility
{
  DWORD 'KATV';

  DWORD NrOfTracks;
  DWORD InterpolationType;             //0 - None
                                       //1 - Linear
                                       //2 - Hermite
                                       //3 - Bezier
  DWORD GlobalSequenceId;

  struct ScalingTrack[NrOfTracks]
  {
    DWORD Time;
    FLOAT Visibility;

    if(InterpolationType > 1)
    {
      FLOAT InTan;
      FLOAT OutTan;
    }
  };
};


//+-----------------------------------------------------------------------------
//| Animated light visibility
//+-----------------------------------------------------------------------------
struct LightVisibility
{
  DWORD 'KLAV';

  DWORD NrOfTracks;
  DWORD InterpolationType;             //0 - None
                                       //1 - Linear
                                       //2 - Hermite
                                       //3 - Bezier
  DWORD GlobalSequenceId;

  struct ScalingTrack[NrOfTracks]
  {
    DWORD Time;
    FLOAT Visibility;

    if(InterpolationType > 1)
    {
      FLOAT InTan;
      FLOAT OutTan;
    }
  };
};


//+-----------------------------------------------------------------------------
//| Animated light color
//+-----------------------------------------------------------------------------
struct LightColor
{
  DWORD 'KLAC';

  DWORD NrOfTracks;
  DWORD InterpolationType;             //0 - None
                                       //1 - Linear
                                       //2 - Hermite
                                       //3 - Bezier
  DWORD GlobalSequenceId;

  struct ScalingTrack[NrOfTracks]
  {
    DWORD Time;
    FLOAT3 Color;

    if(InterpolationType > 1)
    {
      FLOAT3 InTan;
      FLOAT3 OutTan;
    }
  };
};


//+-----------------------------------------------------------------------------
//| Animated light intensity
//+-----------------------------------------------------------------------------
struct LightIntensity
{
  DWORD 'KLAI';

  DWORD NrOfTracks;
  DWORD InterpolationType;             //0 - None
                                       //1 - Linear
                                       //2 - Hermite
                                       //3 - Bezier
  DWORD GlobalSequenceId;

  struct ScalingTrack[NrOfTracks]
  {
    DWORD Time;
    FLOAT Intensity;

    if(InterpolationType > 1)
    {
      FLOAT InTan;
      FLOAT OutTan;
    }
  };
};


//+-----------------------------------------------------------------------------
//| Animated light ambient color
//+-----------------------------------------------------------------------------
struct LightAmbientColor
{
  DWORD 'KLBC';

  DWORD NrOfTracks;
  DWORD InterpolationType;             //0 - None
                                       //1 - Linear
                                       //2 - Hermite
                                       //3 - Bezier
  DWORD GlobalSequenceId;

  struct ScalingTrack[NrOfTracks]
  {
    DWORD Time;
    FLOAT3 AmbientColor;

    if(InterpolationType > 1)
    {
      FLOAT3 InTan;
      FLOAT3 OutTan;
    }
  };
};


//+-----------------------------------------------------------------------------
//| Animated light ambient intensity
//+-----------------------------------------------------------------------------
struct LightAmbientIntensity
{
  DWORD 'KLBI';

  DWORD NrOfTracks;
  DWORD InterpolationType;             //0 - None
                                       //1 - Linear
                                       //2 - Hermite
                                       //3 - Bezier
  DWORD GlobalSequenceId;

  struct ScalingTrack[NrOfTracks]
  {
    DWORD Time;
    FLOAT AmbientIntensity;

    if(InterpolationType > 1)
    {
      FLOAT InTan;
      FLOAT OutTan;
    }
  };
};


//+-----------------------------------------------------------------------------
//| Animated particle emitter visibility
//+-----------------------------------------------------------------------------
struct ParticleEmitterVisibility
{
  DWORD 'KPEV';

  DWORD NrOfTracks;
  DWORD InterpolationType;             //0 - None
                                       //1 - Linear
                                       //2 - Hermite
                                       //3 - Bezier
  DWORD GlobalSequenceId;

  struct ScalingTrack[NrOfTracks]
  {
    DWORD Time;
    FLOAT Visibility;

    if(InterpolationType > 1)
    {
      FLOAT InTan;
      FLOAT OutTan;
    }
  };
};


//+-----------------------------------------------------------------------------
//| Animated particle emitter 2 visibility
//+-----------------------------------------------------------------------------
struct ParticleEmitter2Visibility
{
  DWORD 'KP2V';

  DWORD NrOfTracks;
  DWORD InterpolationType;             //0 - None
                                       //1 - Linear
                                       //2 - Hermite
                                       //3 - Bezier
  DWORD GlobalSequenceId;

  struct ScalingTrack[NrOfTracks]
  {
    DWORD Time;
    FLOAT Visibility;

    if(InterpolationType > 1)
    {
      FLOAT InTan;
      FLOAT OutTan;
    }
  };
};


//+-----------------------------------------------------------------------------
//| Animated particle emitter 2 emission rate
//+-----------------------------------------------------------------------------
struct ParticleEmitter2EmissionRate
{
  DWORD 'KP2E';

  DWORD NrOfTracks;
  DWORD InterpolationType;             //0 - None
                                       //1 - Linear
                                       //2 - Hermite
                                       //3 - Bezier
  DWORD GlobalSequenceId;

  struct ScalingTrack[NrOfTracks]
  {
    DWORD Time;
    FLOAT EmissionRate;

    if(InterpolationType > 1)
    {
      FLOAT InTan;
      FLOAT OutTan;
    }
  };
};


//+-----------------------------------------------------------------------------
//| Animated particle emitter 2 width
//+-----------------------------------------------------------------------------
struct ParticleEmitter2Width
{
  DWORD 'KP2W';

  DWORD NrOfTracks;
  DWORD InterpolationType;             //0 - None
                                       //1 - Linear
                                       //2 - Hermite
                                       //3 - Bezier
  DWORD GlobalSequenceId;

  struct ScalingTrack[NrOfTracks]
  {
    DWORD Time;
    FLOAT Width;

    if(InterpolationType > 1)
    {
      FLOAT InTan;
      FLOAT OutTan;
    }
  };
};


//+-----------------------------------------------------------------------------
//| Animated particle emitter 2 length
//+-----------------------------------------------------------------------------
struct ParticleEmitter2Length
{
  DWORD 'KP2N';

  DWORD NrOfTracks;
  DWORD InterpolationType;             //0 - None
                                       //1 - Linear
                                       //2 - Hermite
                                       //3 - Bezier
  DWORD GlobalSequenceId;

  struct ScalingTrack[NrOfTracks]
  {
    DWORD Time;
    FLOAT Length;

    if(InterpolationType > 1)
    {
      FLOAT InTan;
      FLOAT OutTan;
    }
  };
};


//+-----------------------------------------------------------------------------
//| Animated particle emitter 2 speed
//+-----------------------------------------------------------------------------
struct ParticleEmitter2Speed
{
  DWORD 'KP2S';

  DWORD NrOfTracks;
  DWORD InterpolationType;             //0 - None
                                       //1 - Linear
                                       //2 - Hermite
                                       //3 - Bezier
  DWORD GlobalSequenceId;

  struct ScalingTrack[NrOfTracks]
  {
    DWORD Time;
    FLOAT Speed;

    if(InterpolationType > 1)
    {
      FLOAT InTan;
      FLOAT OutTan;
    }
  };
};


//+-----------------------------------------------------------------------------
//| Animated ribbon emitter visibility
//+-----------------------------------------------------------------------------
struct RibbonEmitterVisibility
{
  DWORD 'KRVS';

  DWORD NrOfTracks;
  DWORD InterpolationType;             //0 - None
                                       //1 - Linear
                                       //2 - Hermite
                                       //3 - Bezier
  DWORD GlobalSequenceId;

  struct ScalingTrack[NrOfTracks]
  {
    DWORD Time;
    FLOAT Visibility;

    if(InterpolationType > 1)
    {
      FLOAT InTan;
      FLOAT OutTan;
    }
  };
};


//+-----------------------------------------------------------------------------
//| Animated ribbon emitter height above
//+-----------------------------------------------------------------------------
struct RibbonEmitterHeightAbove
{
  DWORD 'KRHA';

  DWORD NrOfTracks;
  DWORD InterpolationType;             //0 - None
                                       //1 - Linear
                                       //2 - Hermite
                                       //3 - Bezier
  DWORD GlobalSequenceId;

  struct ScalingTrack[NrOfTracks]
  {
    DWORD Time;
    FLOAT HeightAbove;

    if(InterpolationType > 1)
    {
      FLOAT InTan;
      FLOAT OutTan;
    }
  };
};


//+-----------------------------------------------------------------------------
//| Animated ribbon emitter height below
//+-----------------------------------------------------------------------------
struct RibbonEmitterHeightBelow
{
  DWORD 'KRHB';

  DWORD NrOfTracks;
  DWORD InterpolationType;             //0 - None
                                       //1 - Linear
                                       //2 - Hermite
                                       //3 - Bezier
  DWORD GlobalSequenceId;

  struct ScalingTrack[NrOfTracks]
  {
    DWORD Time;
    FLOAT HeightBelow;

    if(InterpolationType > 1)
    {
      FLOAT InTan;
      FLOAT OutTan;
    }
  };
};

//+-----------------------------------------------------------------------------
//| Geoset animations
//+-----------------------------------------------------------------------------
struct GeosetAnimationChunk
{
  DWORD 'GEOA';
  DWORD ChunkSize;

  struct GeosetAnimation[NrOfGeosetAnimations]
  {
    DWORD InclusiveSize;

    FLOAT Alpha;
    DWORD Flags;                       //#1 - DropShadow
                                       //#2 - Color
    FLOAT3 Color;

    DWORD GeosetId;

    {GeosetAlpha}
    {GeosetColor}
  };
};

//+-----------------------------------------------------------------------------
//| Lights
//+-----------------------------------------------------------------------------
struct LightChunk
{
  DWORD 'LITE';
  DWORD ChunkSize;

  struct Light[NrOfLights]
  {
    DWORD InclusiveSize;

    Node;

    DWORD Type;                        //0 - Omnidirectional
                                       //1 - Directional
                                       //2 - Ambient
    DWORD AttenuationStart;
    DWORD AttenuationEnd;
    FLOAT3 Color;
    FLOAT Intensity;
    FLOAT3 AmbientColor;
    FLOAT AmbientIntensity;

    {LightVisibility}
    {LightColor}
    {LightIntensity}
    {LightAmbientColor}
    {LightAmbientIntensity}
  };
};


//+-----------------------------------------------------------------------------
//| Helpers
//+-----------------------------------------------------------------------------
struct HelperChunk
{
  DWORD 'HELP';
  DWORD ChunkSize;

  struct Helper[NrOfHelpers]
  {
    Node;
  };
};


//+-----------------------------------------------------------------------------
//| Attachments
//+-----------------------------------------------------------------------------
struct AttachmentChunk
{
  DWORD 'ATCH';
  DWORD ChunkSize;

  struct Attachment[NrOfAttachments]
  {
    DWORD InclusiveSize;

    Node;

    CHAR[260] Path;
    DWORD AttachmentId;                //First attachment - 0, second - 1 etc...

    {AttachmentVisibility}
  };
};

//+-----------------------------------------------------------------------------
//| Particle emitters
//+-----------------------------------------------------------------------------
struct ParticleEmitterChunk
{
  DWORD 'PREM';
  DWORD ChunkSize;

  struct ParticleEmitter[NrOfParticleEmitters]
  {
    DWORD InclusiveSize;

    Node;

    FLOAT EmissionRate;
    FLOAT Gravity;
    FLOAT Longitude;
    FLOAT Latitude;

    CHAR[260] SpawnModelFileName;

    FLOAT LifeSpan;
    FLOAT InitialVelocity;

    {ParticleEmitterVisibility}
  };
};


//+-----------------------------------------------------------------------------
//| Particle emitters 2
//+-----------------------------------------------------------------------------
struct ParticleEmitter2Chunk
{
  DWORD 'PRE2';
  DWORD ChunkSize;

  struct ParticleEmitter2[NrOfParticleEmitters2]
  {
    DWORD InclusiveSize;

    Node;

    FLOAT Speed;
    FLOAT Variation;
    FLOAT Latitude;
    FLOAT Gravity;
    FLOAT Lifespan;
    FLOAT EmissionRate;
    FLOAT Length;
    FLOAT Width;

    DWORD FilterMode;                  //0 - Blend
                                       //1 - Additive
                                       //2 - Modulate
                                       //3 - Modulate2x
                                       //4 - AlphaKey

    DWORD Rows;
    DWORD Columns;
    DWORD HeadOrTail;                  //0 - Head
                                       //1 - Tail
                                       //2 - Both

    FLOAT TailLength;
    FLOAT Time;

    FLOAT3[3] SegmentColor;
    BYTE[3] SegmentAlpha;
    FLOAT[3] SegmentScaling;

    DWORD HeadIntervalStart
    DWORD HeadIntervalEnd
    DWORD HeadIntervalRepeat
    DWORD HeadDecayIntervalStart
    DWORD HeadDecayIntervalEnd
    DWORD HeadDecayIntervalRepeat
    DWORD TailIntervalStart
    DWORD TailIntervalEnd
    DWORD TailIntervalRepeat
    DWORD TailDecayIntervalStart
    DWORD TailDecayIntervalEnd
    DWORD TailDecayIntervalRepeat

    DWORD TextureId;
    DWORD Squirt;                      //0 - No Squirt
                                       //1 - Squirt
    DWORD PriorityPlane;
    DWORD ReplaceableId;

    {ParticleEmitter2Visibility}
    {ParticleEmitter2EmissionRate}
    {ParticleEmitter2Width}
    {ParticleEmitter2Length}
    {ParticleEmitter2Speed}
  };
};


//+-----------------------------------------------------------------------------
//| Ribbon emitters
//+-----------------------------------------------------------------------------
struct RibbonEmitterChunk
{
  DWORD 'RIBB';
  DWORD ChunkSize;

  struct RibbonEmitter[NrOfRibbonEmitters]
  {
    DWORD InclusiveSize;

    Node;

    FLOAT HeightAbove;
    FLOAT HeightBelow;
    FLOAT Alpha;
    FLOAT3 Color;
    FLOAT LifeSpan;

    DWORD TextureSlot;

    DWORD EmissionRate;
    DWORD Rows;
    DWORD Columns;
    DWORD MaterialId;
    FLOAT Gravity;

    {RibbonEmitterVisibility}
    {RibbonEmitterHeightAbove}
    {RibbonEmitterHeightBelow}
  };
};


//+-----------------------------------------------------------------------------
//| Tracks
//+-----------------------------------------------------------------------------
struct Tracks
{
  DWORD 'KEVT';
  DWORD NrOfTracks;

  DWORD GlobalSequenceId;

  struct Track[NrOfTracks]
  {
    DWORD Time;
  };
};


//+-----------------------------------------------------------------------------
//| Event objects
//+-----------------------------------------------------------------------------
struct EventObjectChunk
{
  DWORD 'EVTS';
  DWORD ChunkSize;

  struct EventObject[NrOfEventObjects]
  {
    Node;

    {Tracks}
  };
};


//+-----------------------------------------------------------------------------
//| Cameras
//+-----------------------------------------------------------------------------
struct CameraChunk
{
  DWORD 'CAMS';
  DWORD ChunkSize;

  struct Camera[NrOfCameras]
  {
    DWORD InclusiveSize;

    CHAR[80] Name;

    FLOAT3 Position;
    DWORD FieldOfView;
    DWORD FarClippingPlane;
    DWORD NearClippingPlane;
    FLOAT3 TargetPosition;

    {CameraPositionTranslation}
    {CameraTargetTranslation}
  };
};


//+-----------------------------------------------------------------------------
//| Collision shapes
//+-----------------------------------------------------------------------------
struct CollisionShapeChunk
{
  DWORD 'CLID';
  DWORD ChunkSize;

  struct CollisionShape[NrOfCollisionShapes]
  {
    Node;

    DWORD Type;                        //0 - Box
                                       //1 - ???
                                       //2 - Sphere

                                       //NrOfVertices = 2 (if Type == 0)
    struct Vertex[NrOfVertices]        //NrOfVertices = 1 (if Type == 2)
    {
      FLOAT3 Position;
    };

    if(Type == 2)
    {
      FLOAT BoundsRadius;
    }
  };
};
