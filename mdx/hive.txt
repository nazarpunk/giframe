//-- new track types
KMTE: float emissiveGain
KPPS: float speed
KPPV: float visibility
KPPL: float lifespan
KPPA: float alpha
KPPE: float emissionRate
KPPC: float[3] color

// Node
KGTR: float[3] translation
KGRT: float[4] rotation
KGSC: float[3] scaling
// Layer
KMTF: uint32 textureId
KMTA: float alpha
KMTE: float emissiveGain
KFC3: float[3] fresnelColor
KFCA: float fresnelAlpha
KFTC: float fresnelTeamColor
// Texture animation
KTAT: float[3] translation
KTAR: float[4] rotation
KTAS: float[3] scaling
//Geoset animation
KGAO: float alpha
KGAC: float[3] color
// Light
KLAS: float attenuationStart
KLAE: float attenuationStartEnd
KLAC: float[3] color
KLAI: float intensity
KLBI: float ambientIntensity
KLBC: float[3] ambientColor
KLAV: float visibility
// Attachment
KATV: float visibility
// Particle emitter
KPEE: float emissionRate
KPEG: float gravity
KPLN: float longitude
KPLT: float latitude
KPEL: float lifespan
KPES: float speed
KPEV: float visibility
// Particle emitter 2
KP2E: float emissionRate
KP2G: float gravity
KP2L: float latitude
KP2S: float speed
KP2V: float visibility
KP2R: float variation
KP2N: float length
KP2W: float width
// Ribbon emitter
KRVS: float visibility
KRHA: float heightAbove
KRHB: float heightBelow
KRAL: float alpha
KRCO: float[3] color
KRTX: uint32 textureSlot
// Camera
KCTR: float[3] translation
KCRL: float rotation
KTTR: float[3] targetTranslation
// Corn emitter
KPPA: float alpha
KPPC: float[3] color
KPPE: float emissionRate
KPPL: float lifespan
KPPS: float speed
KPPV: float visibility

Extent {
  float boundsRadius
  float[3] minimum
  float[3] maximum
}

Node {
  uint32 inclusiveSize
  char[80] name
  uint32 objectId
  uint32 parentId
  uint32 flags // 0x0: helper
               // 0x1: dont inherit translation
               // 0x2: dont inherit rotation
               // 0x4: dont inherit scaling
               // 0x8: billboarded
               // 0x10: billboarded lock x
               // 0x20: billboarded lock y
               // 0x40: billboarded lock z
               // 0x80: camera anchored
               // 0x100: bone
               // 0x200: light
               // 0x400 event object
               // 0x800: attachment
               // 0x1000 particle emitter
               // 0x2000: collision shape
               // 0x4000: ribbon emitter
               // 0x8000: if particle emitter: emitter uses mdl, if particle emitter 2: unshaded
               // 0x10000: if particle emitter: emitter uses tga, if particle emitter 2: sort primitives far z
               // 0x20000: line emitter
               // 0x40000: unfogged
               // 0x80000: model space
               // 0x100000: xy quad
  (KGTR)
  (KGRT)
  (KGSC)
}

Sequence {
  char[80] name
  uint32[2] interval
  float moveSpeed
  uint32 flags // 0: looping
               // 1: non looping
  float rarity
  uint32 syncPoint
  Extent extent
}

Texture {
  uint32 replaceableId
  char[260] fileName
  uint32 flags
}

SoundTrack {
  char[260] fileName
  float volume
  float pitch
  uint32 flags
}

Material {
  uint32 inclusiveSize
  uint32 priorityPlane
  uint32 flags

  if (version > 800) {
    char[80] shader
  }

  char[4] "LAYS"
  uint32 layersCount
  Layer[layersCount] layers
}

Layer {
  uint32 inclusiveSize
  uint32 filterMode // 0: none
                    // 1: transparent
                    // 2: blend
                    // 3: additive
                    // 4: add alpha
                    // 5: modulate
                    // 6: modulate 2x
  uint32 shadingFlags // 0x1: unshaded
                      // 0x2: sphere environment map
                      // 0x4: ?
                      // 0x8: ?
                      // 0x10: two sided
                      // 0x20: unfogged
                      // 0x40: no depth test
                      // 0x80: no depth set
  uint32 textureId
  uint32 textureAnimationId
  uint32 coordId
  float alpha

  if (version > 800) {
    float emissiveGain
    float[3] fresnelColor
    float fresnelOpacity
    float fresnelTeamColor
  }

  (KMTF)
  (KMTA)
  if (version > 800) {
    (KMTE)
  }
  if (version > 900) {
    (KFC3)
    (KFCA)
    (KFTC)
  }
}

TextureAnimation {
  uint32 inclusiveSize
  (KTAT)
  (KTAR)
  (KTAS)
}

Geoset {
  uint32 inclusiveSize
  char[4] "VRTX"
  uint32 vertexCount
  float[vertexCount * 3] vertexPositions
  char[4] "NRMS"
  uint32 normalCount
  float[normalCount * 3] vertexNormals
  char[4] "PTYP"
  uint32 faceTypeGroupsCount
  uint32[faceTypeGroupsCount] faceTypeGroups // 0: points
                                             // 1: lines
                                             // 2: line loop
                                             // 3: line strip
                                             // 4: triangles
                                             // 5: triangle strip
                                             // 6: triangle fan
                                             // 7: quads
                                             // 8: quad strip
                                             // 9: polygons
  char[4] "PCNT"
  uint32 faceGroupsCount
  uint32[faceGroupsCount] faceGroups
  char[4] "PVTX"
  uint32 facesCount
  uint16[facesCount] faces
  char[4] "GNDX"
  uint32 vertexGroupsCount
  uint8[vertexGroupsCount] vertexGroups
  char[4] "MTGC"
  uint32 matrixGroupsCount
  uint32[matrixGroupsCount] matrixGroups
  char[4] "MATS"
  uint32 matrixIndicesCount
  uint32[matrixIndicesCount] matrixIndices
  uint32 materialId
  uint32 selectionGroup
  uint32 selectionFlags

  if (version > 800) {
    uint32 lod
    char[80] lodName
  }

  Extent extent
  uint32 extentsCount
  Extent[extentsCount] sequenceExtents

  if (version > 800) {
    (Tangents)
    (Skin)
  }

  char[4] "UVAS"
  uint32 textureCoordinateSetsCount
  TextureCoordinateSet[textureCoordinateSetsCount] textureCoordinateSets
}

Tangents {
  char[4] "TANG"
  uint32 count
  float[count * 4] tangents
}

Skin {
  char[4] "SKIN"
  uint32 count
  uint8[count] skin
}

TextureCoordinateSet {
  char[4] "UVBS"
  uint32 count
  float[count * 2] texutreCoordinates
}

GeosetAnimation {
  uint32 inclusiveSize
  float alpha
  uint32 flags
  float[3] color
  uint32 geosetId
  (KGAO)
  (KGAC)
}

Bone {
  Node node
  uint32 geosetId
  uint32 geosetAnimationId
}

Light {
  uint32 inclusiveSize
  Node node
  uint32 type // 0: omni light
              // 1: directional light
              // 2: ambient light
  float attenuationStart
  float attenuationEnd
  float[3] color
  float intensity
  float[3] ambientColor
  float ambientIntensity
  (KLAS)
  (KLAE)
  (KLAC)
  (KLAI)
  (KLBI)
  (KLBC)
  (KLAV)
}

Helper {
  Node node
}

Attachment {
  uint32 inclusiveSize
  Node node
  char[260] path
  uint32 attachmentId
  (KATV)
}

ParticleEmitter {
  uint32 inclusiveSize
  Node node
  float emissionRate
  float gravity
  float longitude
  float latitude
  char[260] spawnModelFileName
  float lifespan
  float initialiVelocity
  (KPEE)
  (KPEG)
  (KPLN)
  (KPLT)
  (KPEL)
  (KPES)
  (KPEV)
}

ParticleEmitter2 {
  uint32 inclusiveSize
  Node node
  float speed
  float variation
  float latitude
  float gravity
  float lifespan
  float emissionRate
  float length
  float width
  uint32 filterMode // 0: blend
                    // 1: additive
                    // 2: modulate
                    // 3: modulate 2x
                    // 4: alpha key
  uint32 rows
  uint32 columns
  uint32 headOrTail // 0: head
                    // 1: tail
                    // 2: both
  float tailLength
  float time
  float[3][3] segmentColor
  uint8[3] segmentAlpha
  float[3] segmentScaling
  uint32[3] headInterval
  uint32[3] headDecayInterval
  uint32[3] tailInterval
  uint32[3] tailDecayInterval
  uint32 textureId
  uint32 squirt
  uint32 priorityPlane
  uint32 replaceableId
  (KP2S)
  (KP2R)
  (KP2L)
  (KP2G)
  (KP2E)
  (KP2N)
  (KP2W)
  (KP2V)
}

RibbonEmitter {
  uint32 inclusiveSize
  Node node
  float heightAbove
  float heightBelow
  float alpha
  float[3] color
  float lifespan
  uint32 textureSlot
  uint32 emissionRate
  uint32 rows
  uint32 columns
  uint32 materialId
  float gravity
  (KRHA)
  (KRHB)
  (KRAL)
  (KRCO)
  (KRTX)
  (KRVS)
}

EventObject {
  Node node
  char[4] "KEVT"
  uint32 tracksCount
  uint32 globalSequenceId
  uint32[tracksCount] tracks
}

Camera {
  uint32 inclusiveSize
  char[80] name
  float[3] position
  float filedOfView
  float farClippingPlane
  float nearClippingPlane
  float[3] targetPosition
  (KCTR)
  (KTTR)
  (KCRL)
}

CollisionShape {
  Node node
  uint32 type // 0: cube
              // 1: plane
              // 2: sphere
              // 3: cylinder
  float[?][3] vertices // type 0: 2
                       // type 1: 2
                       // type 2: 1
                       // type 3: 2
  if (type == 2 || type == 3) {
    float radius
  }
}

FaceEffect {
  char[80] target
  char[260] path
}

CornEmitter {
  uint32 inclusiveSize
  Node node
  float lifeSpan
  float emissionRate
  float speed
  float[4] color
  uint32 replaceableId
  char[260] path
  char[260] flags
  (KPPA)
  (KPPC)
  (KPPE)
  (KPPL)
  (KPPS)
  (KPPV)
}